import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv('/content/retail_sales_dataset1.csv')

# Convert 'Date' column to datetime if it exists
if 'Date' in df.columns:
    df['Date'] = pd.to_datetime(df['Date'])

# Select only numeric columns for correlation
numeric_df = df.select_dtypes(include=[np.number])

# Visualizing the data
plt.figure(figsize=(10, 6))
sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm') # Calculate correlation on numeric columns only
plt.title("Correlation Matrix")
plt.show()
# Distribution of Sales
plt.figure(figsize=(10, 6))
sns.histplot(df['Sales'], bins=30, kde=True)
plt.title("Distribution of Sales")
plt.xlabel("Sales")
plt.ylabel("Frequency")
plt.show()

# Boxplot to identify outliers in Sales
plt.figure(figsize=(10, 6))
sns.boxplot(x=df['Sales'])
plt.title("Boxplot of Sales")
plt.xlabel("Sales")
plt.show()

# Identifying outliers using IQR method
Q1 = df['Sales'].quantile(0.25)
Q3 = df['Sales'].quantile(0.75)
IQR = Q3 - Q1
outliers = df[(df['Sales'] < (Q1 - 1.5 * IQR)) | (df['Sales'] > (Q3 + 1.5 * IQR))]

print("\nNumber of outliers in Sales:")
print(outliers.shape[0])

# Key points in the dataset
print("\nKey points in the dataset:")
print(f"Total records: {df.shape[0]}")
print(f"Total features: {df.shape[1]}")
print(f"Number of missing values: {df.isnull().sum().sum()}")
print(f"Number of outliers in Sales: {outliers.shape[0]}")
print(f"Average Sales: {df['Sales'].mean()}")
print(f"Sales Standard Deviation: {df['Sales'].std()}")

# Additional visualizations
plt.figure(figsize=(10, 6))
sns.lineplot(data=df, x='Date', y='Sales')
plt.title("Sales over Time")
plt.xlabel("Date")
plt.ylabel("Sales")
plt.xticks(rotation=45)
plt.show()

# Checking sales by category if the dataset includes such a column
if 'Category' in df.columns:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x='Category', y='Sales', data=df)
    plt.title("Sales by Category")
    plt.xlabel("Category")
    plt.ylabel("Sales")
    plt.show()

# Checking sales by region if the dataset includes such a column
if 'Region' in df.columns:
    plt.figure(figsize=(10, 6))
    sns.barplot(x='Region', y='Sales', data=df, estimator=np.mean)
    plt.title("Average Sales by Region")
    plt.xlabel("Region")
    plt.ylabel("Average Sales")
    plt.show()
